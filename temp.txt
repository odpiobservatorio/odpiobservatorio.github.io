            PutPopUpZ(
                (layer) => {
                    return layer.feature.properties.NombreAA
                }
            )


const icons = {
    /*
    * Al llamar una funcion se obtiene un icono personalizado con las especificaciones
    * Se usa tambien en mapData.js
    */

    "green": () => {
        return L.icon({
            iconUrl: iconsPaths.green,
            shadowUrl: '',

            iconSize: [18 * formatoPlano.size, 18 * formatoPlano.size], // size of the icon
            shadowSize: [50, 64], // size of the shadow
            iconAnchor: [9 * formatoPlano.size, 18 * formatoPlano.size], // point of the icon which will correspond to marker's location
            popupAnchor: [-0, -0] // point from which the popup should open relative to the iconAnchor
        });
    },


    "black": () => {
        return L.icon({
            iconUrl: iconsPaths.black,
            shadowUrl: '',

            iconSize: [18 * formatoPlano.size, 18 * formatoPlano.size], // size of the icon
            shadowSize: [50, 64], // size of the shadow
            iconAnchor: [9 * formatoPlano.size, 18 * formatoPlano.size], // point of the icon which will correspond to marker's location
            popupAnchor: [-0, -0] // point from which the popup should open relative to the iconAnchor
        })
    },


    "red": () => {
        return L.icon({
            iconUrl: iconsPaths.red,
            shadowUrl: '',

            iconSize: [18 * formatoPlano.size, 18 * formatoPlano.size], // size of the icon
            shadowSize: [50, 64], // size of the shadow
            iconAnchor: [9 * formatoPlano.size, 18 * formatoPlano.size], // point of the icon which will correspond to marker's location
            popupAnchor: [-0, -0] // point from which the popup should open relative to the iconAnchor
        })
    }
    ,

    "blue": () => {
        return L.icon({
            iconUrl: iconsPaths.blue,
            shadowUrl: '',

            iconSize: [18 * formatoPlano.size, 18 * formatoPlano.size], // size of the icon
            shadowSize: [50, 64], // size of the shadow
            iconAnchor: [9 * formatoPlano.size, 18 * formatoPlano.size], // point of the icon which will correspond to marker's location
            popupAnchor: [-0, -0] // point from which the popup should open relative to the iconAnchor
        })
    },

    "purple": () => {
        return L.icon({
            iconUrl: iconsPaths.purple,
            shadowUrl: '',

            iconSize: [18 * formatoPlano.size, 18 * formatoPlano.size], // size of the icon
            shadowSize: [50, 64], // size of the shadow
            iconAnchor: [9 * formatoPlano.size, 18 * formatoPlano.size], // point of the icon which will correspond to marker's location
            popupAnchor: [-0, -0] // point from which the popup should open relative to the iconAnchor
        })
    },

    "Ppurple": () => {
        return L.icon({
            iconUrl: iconsPaths.Ppurple,
            shadowUrl: '',

            iconSize: [18 * formatoPlano.size, 18 * formatoPlano.size], // size of the icon
            shadowSize: [50, 64], // size of the shadow
            iconAnchor: [9 * formatoPlano.size, 18 * formatoPlano.size], // point of the icon which will correspond to marker's location
            popupAnchor: [-0, -0] // point from which the popup should open relative to the iconAnchor
        })
    },


    "Ppurple2": () => {
        return L.icon({
            iconUrl: iconsPaths.Ppurple2,
            shadowUrl: '',

            iconSize: [18 * formatoPlano.size, 18 * formatoPlano.size], // size of the icon
            shadowSize: [50, 64], // size of the shadow
            iconAnchor: [9 * formatoPlano.size, 18 * formatoPlano.size], // point of the icon which will correspond to marker's location
            popupAnchor: [-0, -0] // point from which the popup should open relative to the iconAnchor
        })
    },

    "Pblue": () => {
        return L.icon({
            iconUrl: iconsPaths.Pblue,
            shadowUrl: '',

            iconSize: [18 * formatoPlano.size, 18 * formatoPlano.size], // size of the icon
            shadowSize: [50, 64], // size of the shadow
            iconAnchor: [9 * formatoPlano.size, 18 * formatoPlano.size], // point of the icon which will correspond to marker's location
            popupAnchor: [-0, -0] // point from which the popup should open relative to the iconAnchor
        })
    },
    "Pgray": () => {
        return L.icon({
            iconUrl: iconsPaths.Pgray,
            shadowUrl: '',

            iconSize: [18 * formatoPlano.size, 18 * formatoPlano.size], // size of the icon
            shadowSize: [50, 64], // size of the shadow
            iconAnchor: [9 * formatoPlano.size, 18 * formatoPlano.size], // point of the icon which will correspond to marker's location
            popupAnchor: [-0, -0] // point from which the popup should open relative to the iconAnchor
        })
    },
    "Porange": () => {
        return L.icon({
            iconUrl: iconsPaths.Porange,
            shadowUrl: '',

            iconSize: [18 * formatoPlano.size, 18 * formatoPlano.size], // size of the icon
            shadowSize: [50, 64], // size of the shadow
            iconAnchor: [9 * formatoPlano.size, 18 * formatoPlano.size], // point of the icon which will correspond to marker's location
            popupAnchor: [-0, -0] // point from which the popup should open relative to the iconAnchor
        })
    },
    "Pred": () => {
        return L.icon({
            iconUrl: iconsPaths.Pred,
            shadowUrl: '',

            iconSize: [18 * formatoPlano.size, 18 * formatoPlano.size], // size of the icon
            shadowSize: [50, 64], // size of the shadow
            iconAnchor: [9 * formatoPlano.size, 18 * formatoPlano.size], // point of the icon which will correspond to marker's location
            popupAnchor: [-0, -0] // point from which the popup should open relative to the iconAnchor
        })
    },

    "Pgreen": () => {
        return L.icon({
            iconUrl: iconsPaths.Pgreen,
            shadowUrl: '',

            iconSize: [18 * formatoPlano.size, 18 * formatoPlano.size], // size of the icon
            shadowSize: [50, 64], // size of the shadow
            iconAnchor: [9 * formatoPlano.size, 18 * formatoPlano.size], // point of the icon which will correspond to marker's location
            popupAnchor: [-0, -0] // point from which the popup should open relative to the iconAnchor
        })
    },

    "Pgreen2": () => {
        return L.icon({
            iconUrl: iconsPaths.Pgreen2,
            shadowUrl: '',

            iconSize: [18 * formatoPlano.size, 18 * formatoPlano.size], // size of the icon
            shadowSize: [50, 64], // size of the shadow
            iconAnchor: [9 * formatoPlano.size, 18 * formatoPlano.size], // point of the icon which will correspond to marker's location
            popupAnchor: [-0, -0] // point from which the popup should open relative to the iconAnchor
        })
    },



}


            (bigData.MrkAntecedente).push(
                // Se llama el icono de la configuracion de iconos en mapGraphics.js
                new L.marker([registro.Lat, registro.Lng], { icon: icons[formatoPlano["markType"]]() })
                    .addTo(map)
                    .bindPopup(
                        `<b>${registro.Departamento} - ${registro.Year}</b><br>${registro.Municipio
                        }, C: ${registro.ind
                        }<br><button type='button' class='btn btn-secondary' onclick ='verCaso(${JSON.stringify(
                            registro
                        )})'>Ver</button></br>`
                    )
            );